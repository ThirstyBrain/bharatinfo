{"version":3,"file":"static/js/704.1062aca6.chunk.js","mappings":"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","sources":["config-global.ts","sections/blog/post-item.tsx","sections/blog/post-sort.tsx","sections/blog/post-search.tsx","sections/blog/view/blog-view.tsx","pages/blog.tsx","utils/format-number.ts"],"sourcesContent":["import packageJson from '../package.json';\n\n// ----------------------------------------------------------------------\n\nexport type ConfigValue = {\n  appName: string;\n  appVersion: string;\n};\n\n// ----------------------------------------------------------------------\n\nexport const CONFIG: ConfigValue = {\n  appName: 'BharatInfo',\n  appVersion: packageJson.version,\n};\n","import type { CardProps } from '@mui/material/Card';\n\nimport Box from '@mui/material/Box';\nimport Link from '@mui/material/Link';\nimport Card from '@mui/material/Card';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\n\nimport { fDate } from '../../utils/format-time';\nimport { fShortenNumber } from '../../utils/format-number';\n\nimport { varAlpha } from '../../theme/styles';\n\nimport { Iconify } from '../../components/iconify';\nimport { SvgColor } from '../../components/svg-color';\n\n// ----------------------------------------------------------------------\n\nexport type PostItemProps = {\n  id: string;\n  title: string;\n  coverUrl: string;\n  totalViews: number;\n  description: string;\n  totalShares: number;\n  totalComments: number;\n  totalFavorites: number;\n  postedAt: string | number | null;\n  author: {\n    name: string;\n    avatarUrl: string;\n  };\n};\n\nexport function PostItem({\n  sx,\n  post,\n  latestPost,\n  latestPostLarge,\n  ...other\n}: CardProps & {\n  post: PostItemProps;\n  latestPost: boolean;\n  latestPostLarge: boolean;\n}) {\n  const renderAvatar = (\n    <Avatar\n      alt={post.author.name}\n      src={post.author.avatarUrl}\n      sx={{\n        left: 24,\n        zIndex: 9,\n        bottom: -24,\n        position: 'absolute',\n        ...((latestPostLarge || latestPost) && {\n          top: 24,\n        }),\n      }}\n    />\n  );\n\n  const renderTitle = (\n    <Link\n      color=\"inherit\"\n      variant=\"subtitle2\"\n      underline=\"hover\"\n      sx={{\n        height: 44,\n        overflow: 'hidden',\n        WebkitLineClamp: 2,\n        display: '-webkit-box',\n        WebkitBoxOrient: 'vertical',\n        ...(latestPostLarge && { typography: 'h5', height: 60 }),\n        ...((latestPostLarge || latestPost) && {\n          color: 'common.white',\n        }),\n      }}\n    >\n      {post.title}\n    </Link>\n  );\n\n  const renderInfo = (\n    <Box\n      gap={1.5}\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      justifyContent=\"flex-end\"\n      sx={{\n        mt: 3,\n        color: 'text.disabled',\n      }}\n    >\n      {[\n        { number: post.totalComments, icon: 'solar:chat-round-dots-bold' },\n        { number: post.totalViews, icon: 'solar:eye-bold' },\n        { number: post.totalShares, icon: 'solar:share-bold' },\n      ].map((info, _index) => (\n        <Box\n          key={_index}\n          display=\"flex\"\n          sx={{\n            ...((latestPostLarge || latestPost) && {\n              opacity: 0.64,\n              color: 'common.white',\n            }),\n          }}\n        >\n          <Iconify width={16} icon={info.icon} sx={{ mr: 0.5 }} />\n          <Typography variant=\"caption\">{fShortenNumber(info.number)}</Typography>\n        </Box>\n      ))}\n    </Box>\n  );\n\n  const renderCover = (\n    <Box\n      component=\"img\"\n      alt={post.title}\n      src={post.coverUrl}\n      sx={{\n        top: 0,\n        width: 1,\n        height: 1,\n        objectFit: 'cover',\n        position: 'absolute',\n      }}\n    />\n  );\n\n  const renderDate = (\n    <Typography\n      variant=\"caption\"\n      component=\"div\"\n      sx={{\n        mb: 1,\n        color: 'text.disabled',\n        ...((latestPostLarge || latestPost) && {\n          opacity: 0.48,\n          color: 'common.white',\n        }),\n      }}\n    >\n      {fDate(post.postedAt)}\n    </Typography>\n  );\n\n  const renderShape = (\n    <SvgColor\n      width={88}\n      height={36}\n      src=\"/assets/icons/shape-avatar.svg\"\n      sx={{\n        left: 0,\n        zIndex: 9,\n        bottom: -16,\n        position: 'absolute',\n        color: 'background.paper',\n        ...((latestPostLarge || latestPost) && { display: 'none' }),\n      }}\n    />\n  );\n\n  return (\n    <Card sx={sx} {...other}>\n      <Box\n        sx={(theme) => ({\n          position: 'relative',\n          pt: 'calc(100% * 3 / 4)',\n          ...((latestPostLarge || latestPost) && {\n            pt: 'calc(100% * 4 / 3)',\n            '&:after': {\n              top: 0,\n              content: \"''\",\n              width: '100%',\n              height: '100%',\n              position: 'absolute',\n              bgcolor: varAlpha(theme.palette.grey['900Channel'], 0.72),\n            },\n          }),\n          ...(latestPostLarge && {\n            pt: {\n              xs: 'calc(100% * 4 / 3)',\n              sm: 'calc(100% * 3 / 4.66)',\n            },\n          }),\n        })}\n      >\n        {renderShape}\n        {renderAvatar}\n        {renderCover}\n      </Box>\n\n      <Box\n        sx={(theme) => ({\n          p: theme.spacing(6, 3, 3, 3),\n          ...((latestPostLarge || latestPost) && {\n            width: 1,\n            bottom: 0,\n            position: 'absolute',\n          }),\n        })}\n      >\n        {renderDate}\n        {renderTitle}\n        {renderInfo}\n      </Box>\n    </Card>\n  );\n}\n","import type { ButtonProps } from '@mui/material/Button';\n\nimport { useState, useCallback } from 'react';\n\nimport Button from '@mui/material/Button';\nimport Popover from '@mui/material/Popover';\nimport MenuList from '@mui/material/MenuList';\nimport MenuItem, { menuItemClasses } from '@mui/material/MenuItem';\n\nimport { varAlpha } from '../../theme/styles';\n\nimport { Iconify } from '../../components/iconify';\n\n// ----------------------------------------------------------------------\n\ntype PostSortProps = ButtonProps & {\n  sortBy: string;\n  onSort: (newSort: string) => void;\n  options: { value: string; label: string }[];\n};\n\nexport function PostSort({ options, sortBy, onSort, sx, ...other }: PostSortProps) {\n  const [openPopover, setOpenPopover] = useState<HTMLButtonElement | null>(null);\n\n  const handleOpenPopover = useCallback((event: React.MouseEvent<HTMLButtonElement>) => {\n    setOpenPopover(event.currentTarget);\n  }, []);\n\n  const handleClosePopover = useCallback(() => {\n    setOpenPopover(null);\n  }, []);\n\n  return (\n    <>\n      <Button\n        disableRipple\n        color=\"inherit\"\n        onClick={handleOpenPopover}\n        endIcon={\n          <Iconify\n            icon={openPopover ? 'eva:chevron-up-fill' : 'eva:chevron-down-fill'}\n            sx={{\n              ml: -0.5,\n            }}\n          />\n        }\n        sx={{\n          bgcolor: (theme) => varAlpha(theme.vars.palette.grey['500Channel'], 0.08),\n          ...sx,\n        }}\n        {...other}\n      >\n        {options.find((option) => option.value === sortBy)?.label}\n      </Button>\n\n      <Popover\n        open={!!openPopover}\n        anchorEl={openPopover}\n        onClose={handleClosePopover}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      >\n        <MenuList\n          disablePadding\n          sx={{\n            p: 0.5,\n            gap: 0.5,\n            width: 160,\n            display: 'flex',\n            flexDirection: 'column',\n            [`& .${menuItemClasses.root}`]: {\n              px: 1,\n              gap: 2,\n              borderRadius: 0.75,\n              [`&.${menuItemClasses.selected}`]: { bgcolor: 'action.selected' },\n            },\n          }}\n        >\n          {options.map((option) => (\n            <MenuItem\n              key={option.value}\n              selected={option.value === sortBy}\n              onClick={() => {\n                onSort(option.value);\n                handleClosePopover();\n              }}\n            >\n              {option.label}\n            </MenuItem>\n          ))}\n        </MenuList>\n      </Popover>\n    </>\n  );\n}\n","import type { Theme, SxProps } from '@mui/material/styles';\n\nimport TextField from '@mui/material/TextField';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\n\nimport { Iconify } from '../../components/iconify';\n\nimport type { PostItemProps } from './post-item';\n\n// ----------------------------------------------------------------------\n\ntype PostSearchProps = {\n  posts: PostItemProps[];\n  sx?: SxProps<Theme>;\n};\n\nexport function PostSearch({ posts, sx }: PostSearchProps) {\n  return (\n    <Autocomplete\n      sx={{ width: 280 }}\n      autoHighlight\n      popupIcon={null}\n      slotProps={{\n        paper: {\n          sx: {\n            width: 320,\n            [`& .${autocompleteClasses.option}`]: {\n              typography: 'body2',\n            },\n            ...sx,\n          },\n        },\n      }}\n      options={posts}\n      getOptionLabel={(post) => post.title}\n      isOptionEqualToValue={(option, value) => option.id === value.id}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          placeholder=\"Search post...\"\n          InputProps={{\n            ...params.InputProps,\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <Iconify\n                  icon=\"eva:search-fill\"\n                  sx={{ ml: 1, width: 20, height: 20, color: 'text.disabled' }}\n                />\n              </InputAdornment>\n            ),\n          }}\n        />\n      )}\n    />\n  );\n}\n","import { useState, useCallback } from 'react';\n\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Unstable_Grid2';\nimport Typography from '@mui/material/Typography';\nimport Pagination from '@mui/material/Pagination';\n\nimport { _posts } from '../../../_mock';\nimport { DashboardContent } from '../../../layouts/dashboard';\n\nimport { Iconify } from '../../../components/iconify';\n\nimport { PostItem } from '../post-item';\nimport { PostSort } from '../post-sort';\nimport { PostSearch } from '../post-search';\n\n// ----------------------------------------------------------------------\n\nexport function BlogView() {\n  const [sortBy, setSortBy] = useState('latest');\n\n  const handleSort = useCallback((newSort: string) => {\n    setSortBy(newSort);\n  }, []);\n\n  return (\n    <DashboardContent>\n      <Box display=\"flex\" alignItems=\"center\" mb={5}>\n        <Typography variant=\"h4\" flexGrow={1}>\n          Blog\n        </Typography>\n        <Button\n          variant=\"contained\"\n          color=\"inherit\"\n          startIcon={<Iconify icon=\"mingcute:add-line\" />}\n        >\n          New post\n        </Button>\n      </Box>\n\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ mb: 5 }}>\n        <PostSearch posts={_posts} />\n        <PostSort\n          sortBy={sortBy}\n          onSort={handleSort}\n          options={[\n            { value: 'latest', label: 'Latest' },\n            { value: 'popular', label: 'Popular' },\n            { value: 'oldest', label: 'Oldest' },\n          ]}\n        />\n      </Box>\n\n      <Grid container spacing={3}>\n        {_posts.map((post, index) => {\n          const latestPostLarge = index === 0;\n          const latestPost = index === 1 || index === 2;\n\n          return (\n            <Grid key={post.id} xs={12} sm={latestPostLarge ? 12 : 6} md={latestPostLarge ? 6 : 3}>\n              <PostItem post={post} latestPost={latestPost} latestPostLarge={latestPostLarge} />\n            </Grid>\n          );\n        })}\n      </Grid>\n\n      <Pagination count={10} color=\"primary\" sx={{ mt: 8, mx: 'auto' }} />\n    </DashboardContent>\n  );\n}\n","import { Helmet } from 'react-helmet-async';\n\nimport { CONFIG } from '../config-global';\n\nimport { BlogView } from '../sections/blog/view';\n\n// ----------------------------------------------------------------------\n\nexport default function Page() {\n  return (\n    <>\n      <Helmet>\n        <title> {`Blog - ${CONFIG.appName}`}</title>\n      </Helmet>\n\n      <BlogView />\n    </>\n  );\n}\n","/*\n * Locales code\n * https://gist.github.com/raushankrjha/d1c7e35cf87e69aa8b4208a8171a8416\n */\n\nexport type InputNumberValue = string | number | null | undefined;\n\ntype Options = Intl.NumberFormatOptions | undefined;\n\nconst DEFAULT_LOCALE = { code: 'en-US', currency: 'USD' };\n\nfunction processInput(inputValue: InputNumberValue): number | null {\n  if (inputValue == null || Number.isNaN(inputValue)) return null;\n  return Number(inputValue);\n}\n\n// ----------------------------------------------------------------------\n\nexport function fNumber(inputValue: InputNumberValue, options?: Options) {\n  const locale = DEFAULT_LOCALE;\n\n  const number = processInput(inputValue);\n  if (number === null) return '';\n\n  const fm = new Intl.NumberFormat(locale.code, {\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n    ...options,\n  }).format(number);\n\n  return fm;\n}\n\n// ----------------------------------------------------------------------\n\nexport function fCurrency(inputValue: InputNumberValue, options?: Options) {\n  const locale = DEFAULT_LOCALE;\n\n  const number = processInput(inputValue);\n  if (number === null) return '';\n\n  const fm = new Intl.NumberFormat(locale.code, {\n    style: 'currency',\n    currency: locale.currency,\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 2,\n    ...options,\n  }).format(number);\n\n  return fm;\n}\n\n// ----------------------------------------------------------------------\n\nexport function fPercent(inputValue: InputNumberValue, options?: Options) {\n  const locale = DEFAULT_LOCALE;\n\n  const number = processInput(inputValue);\n  if (number === null) return '';\n\n  const fm = new Intl.NumberFormat(locale.code, {\n    style: 'percent',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 1,\n    ...options,\n  }).format(number / 100);\n\n  return fm;\n}\n\n// ----------------------------------------------------------------------\n\nexport function fShortenNumber(inputValue: InputNumberValue, options?: Options) {\n  const locale = DEFAULT_LOCALE;\n\n  const number = processInput(inputValue);\n  if (number === null) return '';\n\n  const fm = new Intl.NumberFormat(locale.code, {\n    notation: 'compact',\n    maximumFractionDigits: 2,\n    ...options,\n  }).format(number);\n\n  return fm.replace(/[A-Z]/g, (match) => match.toLowerCase());\n}\n\n// ----------------------------------------------------------------------\n\nexport function fData(inputValue: InputNumberValue) {\n  const number = processInput(inputValue);\n  if (number === null || number === 0) return '0 bytes';\n\n  const units = ['bytes', 'Kb', 'Mb', 'Gb', 'Tb', 'Pb', 'Eb', 'Zb', 'Yb'];\n  const decimal = 2;\n  const baseValue = 1024;\n\n  const index = Math.floor(Math.log(number) / Math.log(baseValue));\n  const fm = `${parseFloat((number / baseValue ** index).toFixed(decimal))} ${units[index]}`;\n\n  return fm;\n}\n"],"names":["CONFIG","appName","appVersion","PostItem","_ref","sx","post","latestPost","latestPostLarge","other","renderAvatar","_jsx","Avatar","alt","author","name","src","avatarUrl","left","zIndex","bottom","position","top","renderTitle","Link","color","variant","underline","height","overflow","WebkitLineClamp","display","WebkitBoxOrient","typography","children","title","renderInfo","Box","gap","flexWrap","justifyContent","mt","number","totalComments","icon","totalViews","totalShares","map","info","_index","_jsxs","opacity","Iconify","width","mr","Typography","fShortenNumber","renderCover","component","coverUrl","objectFit","renderDate","mb","fDate","postedAt","renderShape","SvgColor","Card","theme","pt","content","bgcolor","varAlpha","palette","grey","xs","sm","p","spacing","PostSort","_options$find","options","sortBy","onSort","openPopover","setOpenPopover","useState","handleOpenPopover","useCallback","event","currentTarget","handleClosePopover","_Fragment","Button","disableRipple","onClick","endIcon","ml","vars","find","option","value","label","Popover","open","anchorEl","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuList","disablePadding","flexDirection","menuItemClasses","root","px","borderRadius","selected","MenuItem","PostSearch","posts","Autocomplete","autoHighlight","popupIcon","slotProps","paper","autocompleteClasses","getOptionLabel","isOptionEqualToValue","id","renderInput","params","TextField","placeholder","InputProps","startAdornment","InputAdornment","BlogView","setSortBy","handleSort","newSort","DashboardContent","alignItems","flexGrow","startIcon","_posts","Grid","container","index","md","Pagination","count","mx","Page","Helmet","DEFAULT_LOCALE","code","currency","processInput","inputValue","Number","isNaN","fCurrency","locale","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","notation","replace","match","toLowerCase"],"sourceRoot":""}